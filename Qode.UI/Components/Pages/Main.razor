@page "/"
@page "/Circuit/{CircuitId:int}"

@rendermode InteractiveServer

@using System.IO
@using System.Numerics
@using System.Text
@using System.Text.Json
@using System.Text.Json.Serialization
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore
@using MudBlazor
@using ApexCharts
@using Qode.LinearAlgebra
@using Qode.Quantum
@using Qode.Infrastructure
@using Qode.UI.Models
@using Qode.UI.Utils

@inject IJSRuntime JS
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<PageTitle>Qode</PageTitle>

<style>
    .simulation {
        max-width: 100vw;
    }
    
    .simulation-info-block {
        min-height: 420px;
    }

    .simulation-info-block svg {
        background: none !important;
    }

    .simulation-result {
        text-align: center;
    }

    .simulation-result p {
        display: ruby;
    }
</style>

<MudPaper Class="pa-3">
    <MudToolBar Class="gap-4">
        <MudButton Variant="Variant.Filled" Color="MudBlazor.Color.Primary" OnClick="Simulate">Simulate</MudButton>
        <MudButton Variant="Variant.Filled" Color="MudBlazor.Color.Error" OnClick="Clear">Clear</MudButton>
        <MudButton Variant="Variant.Filled" Color="MudBlazor.Color.Warning" OnClick="Export">Export</MudButton>
        <AuthorizeView>
            <Authorized>
                <MudButton Variant="Variant.Filled" Color="MudBlazor.Color.Default" @onclick="OpenSaveDialog">Save</MudButton>
            </Authorized>
            <NotAuthorized>
                <MudTooltip Text="Login to save circuit">
                    <MudButton Variant="Variant.Filled" Color="MudBlazor.Color.Default" Disabled="true">Save</MudButton>
                </MudTooltip>
            </NotAuthorized>
        </AuthorizeView>
        @if (CircuitName is not null)
        {
            <MudText Typo="Typo.h5">@CircuitName</MudText>
        }
        <MudSpacer />
        <MudMenu Label="Resource">
            <MudMenuItem>Backend</MudMenuItem>
            <MudMenuItem Disabled="true">WebAssembly</MudMenuItem>
            <MudMenuItem Disabled="true">Super Computer</MudMenuItem>
            <MudMenuItem Disabled="true">Quantum Computer</MudMenuItem>
        </MudMenu>
    </MudToolBar>
    <Circuit @ref="_circuit" InitialCircuitItems="InitialCircuitItems" />
</MudPaper>

@if (SimulationResults is not null)
{
    <MudGrid Class="pa-1 simulation">
        <MudItem xs="5">
            <MudPaper Class="pa-3 simulation-info-block">
                <ApexChart
                    Title="State Probabilities"
                    TItem="SimulationState"
                    Options="SimulationStatesChartOptions"
                    Height="380"
                    @ref="ChartSimulationStates">
                    <ApexPointSeries
                        Name="Probability"
                        Items="SimulationStates"
                        XValue="@(e => StateDisplay.FromIndex(e.Index, _circuit.NumberOfQubits))"
                        YAggregate="@(e => e.Sum(e => e.Value))"
                        SeriesType="SeriesType.Bar" />
                </ApexChart>
            </MudPaper>
        </MudItem>
        <MudItem xs="2">
            <MudPaper Class="pa-3 simulation-info-block">
                <MudList Class="pa-0">
                    <MudListSubheader Class="pa-0">
                        <MudText Typo="Typo.subtitle1">
                            <b>Results</b>
                        </MudText>
                    </MudListSubheader>
                    @foreach ((bool result, int index) in SimulationResults.Select((e, i) => (e, i)))
                    {
                        <MudListItem Class="pa-0 simulation-result">
                            <MudText Typo="Typo.body1">Q</MudText>
                            <MudText Typo="Typo.body2">@(index + 1)</MudText>
                            <MudText Typo="Typo.body1"> = </MudText>
                            <MudChip Color="@(result ? MudBlazor.Color.Success : MudBlazor.Color.Error)">
                                @(result ? "1" : "0")
                            </MudChip>
                        </MudListItem>
                        <MudDivider />
                    }
                </MudList>
            </MudPaper>
        </MudItem>
        <MudItem xs="5">
            <MudPaper Class="pa-3 simulation-info-block">
                <ApexChart
                    Title="Qubits"
                    TItem="SimulationQubit"
                    Options="SimulationQubitsChartOptions"
                    Height="380"
                    @ref="ChartSimulationQubits">
                    <ApexPointSeries
                        Name="Probability"
                        Items="SimulationQubits"
                        XValue="@(e => $"Q{e.Index + 1}")"
                        YAggregate="@(e => e.Sum(e => e.Probability))"
                        SeriesType="SeriesType.Bar" />
                    <ApexPointSeries
                        Name="Distribution"
                        Items="SimulationQubits"
                        XValue="@(e => $"Q{e.Index + 1}")"
                        YAggregate="@(e => e.Sum(e => e.Distribution))"
                        SeriesType="SeriesType.Bar" />
                </ApexChart>
            </MudPaper>
        </MudItem>
    </MudGrid>
}

@code {
    [Parameter]
    public int? CircuitId { get; set; }

    [CascadingParameter]
    protected MudThemeProvider? ThemeProvider { get; set; }

    private bool IsDarkTheme { get; set; }

    private static readonly int NumberOfShots = 100;

    private List<List<CircuitGate>>? InitialCircuitItems { get; set; }
    private string? CircuitName { get; set; }
    private bool IsOwn { get; set; } = false;

    private Qode.UI.Components.Features.Circuit _circuit;

    private IEnumerable<SimulationState> SimulationStates { get; set; } = [];
    private ApexChart<SimulationState>? ChartSimulationStates;
    private ApexChartOptions<SimulationState>? SimulationStatesChartOptions;

    private IEnumerable<bool>? SimulationResults { get; set; }

    private List<SimulationQubit> SimulationQubits { get; set; } = [];
    private ApexChart<SimulationQubit>? ChartSimulationQubits;
    private ApexChartOptions<SimulationQubit>? SimulationQubitsChartOptions;

    private static ApexChartOptions<T> CreateChartOptions<T>() where T : class
    {
        return new()
        {
            Chart = new()
            {
                Toolbar = new()
                {
                    Show = false,
                },
                Selection = new()
                {
                    Enabled = false,
                },
                Zoom = new()
                {
                    Enabled = false,  
                },
            },
            Xaxis = new()
            {
                Labels = new()
                {
                    Rotate = -30,
                    HideOverlappingLabels = true,
                },
            },
            Yaxis = new()
            {
                new()
                {
                    Min = 0.0m,
                    // Max = 100.0m,
                    Labels = new()
                    {
                        Formatter = @"e => `${e}%`",
                    },
                },
            },
            Theme = new Theme
            {
                Mode = Mode.Light,
                Palette = PaletteType.Palette1,
            },
        };
    }

    private async Task OpenSaveDialog()
    {
        var parameters = new DialogParameters<SaveDialog>();
        parameters.Add(x => x.Id, IsOwn ? CircuitId : null);
        parameters.Add(x => x.InitialName, CircuitName);
        parameters.Add(x => x.Circuit, _circuit.GetCircuit());

        var dialog = await DialogService.ShowAsync<SaveDialog>("Save", parameters, new DialogOptions()
        {
            CloseOnEscapeKey = true,
        });

        var result = await dialog.Result;
        var resultInfo = result.Data as (int Id, string Name)?;

        Snackbar.Clear();
        if (result.Canceled)
        {
            return;
        }

        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
        if (resultInfo is not null)
        {
            CircuitName = resultInfo.Value.Name;
            IsOwn = true;
            Snackbar.Add("Saved", Severity.Success);

            if (CircuitId != resultInfo.Value.Id)
            {
                Navigation.NavigateTo($"/Circuit/{resultInfo.Value.Id}", false);
            }
        }
        else
        {
            Snackbar.Add("Unable to save", Severity.Error);
        }
    }

    private void Clear()
    {
        _circuit.Clear();

        SimulationStates = [];
        SimulationResults = null;
        SimulationQubits = [];

        InitialCircuitItems = null;
    }

    private async Task Export()
    {
        var circuitBytes = JsonSerializer.SerializeToUtf8Bytes(_circuit.GetCircuit(), new JsonSerializerOptions()
        {
            Converters =
            {
                new JsonStringEnumConverter(),
            },
        });

        var stream = new MemoryStream(circuitBytes);
        using var streamRef = new DotNetStreamReference(stream);

        var fileName = $"qode-export-{CircuitName ?? $"{DateTime.Now:yyyy-MM-dd}"}.json";
        await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
    }

    private async Task Simulate()
    {
        if (_circuit.NumberOfQubits < 2)
        {
            return;
        }

        bool df = IsDarkTheme;

        var quantumCircuit = new Qode.Quantum.Circuit(_circuit.NumberOfQubits, _circuit.GetCircuit());
        var state = new Matrix<Complex>(quantumCircuit.State);

        SimulationStates = quantumCircuit
            .GetProbabilitiesOfStates()
            .Select((e, i) => new SimulationState(i, (decimal)e * 100.0m));

        SimulationQubits = quantumCircuit
            .GetProbabilitiesOfQubits()
            .Select((e, i) => new SimulationQubit(i, (decimal)e * 100.0m ))
            .ToList();

        SimulationResults = Enumerable.Range(0, _circuit.NumberOfQubits).Select(e => quantumCircuit.Measure(e));
        for (int i = 0; i < NumberOfShots; i++)
        {
            quantumCircuit.State = new Matrix<Complex>(state);
            for (int qubit = 0; qubit < _circuit.NumberOfQubits; qubit++)
            {
                var measurement = quantumCircuit.Measure(qubit);
                SimulationQubits[qubit].Distribution += measurement ? 100.0m / NumberOfShots : 0.0m;
            }
        }

        if (ChartSimulationStates is not null)
        {
            await ChartSimulationStates.UpdateSeriesAsync(true);
        }

        if (ChartSimulationQubits is not null)
        {
            await ChartSimulationQubits.UpdateSeriesAsync(true);
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (CircuitId is null)
        {
            return;
        }

        using var context = DbFactory.CreateDbContext();
        var userId = (await AuthenticationStateProvider.GetAuthenticationStateAsync())
            ?.User.FindFirst(ClaimTypes.NameIdentifier)
            ?.Value;

        var circuit = await context.UserCircuits
            .Include(e => e.Author)
            .Include(e => e.CircuitOperations)
            .AsNoTracking()
            .Where(e => e.Id == CircuitId)
            .Select(e => new UserCircuitItem()
                {
                    Id = e.Id,
                    Name = e.Name,
                    AuthorName = e.Author == null ? null : e.Author.UserName,
                    IsOwn = e.Author != null && e.Author.Id == userId,
                    IsFavorite = userId != null && e.UserFavorites.Any(e => e.Id == userId),
                    Circuit = e.CircuitOperations,
                })
            .FirstOrDefaultAsync();
        if (circuit is null)
        {
            Navigation.NavigateTo($"/", false);
            return;
        }

        InitialCircuitItems = CircuitTransformer.Transform(circuit.Circuit);
        CircuitName = circuit.Name;
        IsOwn = circuit.IsOwn;
    }

    protected override void OnInitialized()
    {
        SimulationStatesChartOptions = CreateChartOptions<SimulationState>();
        SimulationQubitsChartOptions = CreateChartOptions<SimulationQubit>();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender || ThemeProvider is null)
        {
            return;
        }

        var isDarkMode = ThemeProvider.IsDarkMode;
        if (SimulationStatesChartOptions is not null &&
            SimulationQubitsChartOptions is not null)
        {
            SimulationStatesChartOptions.Theme.Mode = isDarkMode ? Mode.Dark : Mode.Light;
            SimulationQubitsChartOptions.Theme.Mode = isDarkMode ? Mode.Dark : Mode.Light;
        }

        // await ThemeProvider.WatchSystemPreference(OnSystemPreferenceChanged);
    }

    /*
    private async Task OnSystemPreferenceChanged(bool isDarkMode)
    {
        if (SimulationStatesChartOptions is not null &&
            SimulationQubitsChartOptions is not null &&
            ChartSimulationStates is not null &&
            ChartSimulationQubits is not null)
        {
            SimulationStatesChartOptions.Theme.Mode = isDarkMode ? Mode.Dark : Mode.Light;
            SimulationQubitsChartOptions.Theme.Mode = isDarkMode ? Mode.Dark : Mode.Light;

            await ChartSimulationStates.UpdateSeriesAsync(true);
            await ChartSimulationQubits.UpdateSeriesAsync(true);
        }
    }
    */
}
